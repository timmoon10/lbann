////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the LBANN Research Team (B. Van Essen, et al.) listed in
// the CONTRIBUTORS file. <lbann-dev@llnl.gov>
//
// LLNL-CODE-697807.
// All rights reserved.
//
// This file is part of LBANN: Livermore Big Artificial Neural Network
// Toolkit. For details, see http://software.llnl.gov/LBANN or
// https://github.com/LLNL/LBANN.
//
// Licensed under the Apache License, Version 2.0 (the "Licensee"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the license.
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package lbann_data;

message Callback {
  // a Callback should contain exactly one of the following
  oneof callback_type {
    CallbackPrint print = 1;
    CallbackTimer timer = 2;
    CallbackSummary summary = 3;
    CallbackDumpWeights dump_weights = 4;
    CallbackDumpOutputs dump_outputs = 5;
    CallbackDumpErrorSignals dump_error_signals = 35;
    CallbackDumpGradients dump_gradients = 6;
    CallbackDumpMBIndices dump_mb_indices = 7;
    CallbackDispIOStats disp_io_stats = 8;
    CallbackImComm imcomm = 9;
    CallbackSaveImages save_images = 10;
    CallbackDebug debug = 11;
    CallbackAdaptiveLearningRate adaptive_learning_rate = 12;
    CallbackStepLearningRate step_learning_rate = 13;
    CallbackCustomLearningRate custom_learning_rate = 14;
    CallbackCheckSmall check_small = 15;
    CallbackCheckNaN check_nan = 16;
    CallbackCheckDataset check_dataset = 17;
    CallbackHang hang = 18;
    CallbackDropFixedLearningRate drop_fixed_learning_rate = 19;
    CallbackLinearGrowthLearningRate linear_growth_learning_rate = 20;
    CallbackProfiler profiler = 21;
    CallbackStepMinibatch step_minibatch = 22;
    CallbackCheckGradients check_gradients = 23;
    CallbackLTFB ltfb = 24;
    CallbackDebugIO debug_io = 25;
    CallbackMinibatchSchedule minibatch_schedule = 26;
    CallbackOptimizerwiseAdaptiveLearningRate optimizerwise_adaptive_learning_rate = 27;
    CallbackCheckpoint checkpoint = 28;
    CallbackSaveModel save_model = 29;
    CallbackPolyLearningRate poly_learning_rate = 30;
    CallbackReplaceWeights replace_weights = 31;
    CallbackGPUMemoryUsage gpu_memory_usage = 32;
    CallbackSyncLayers sync_layers = 33;
    CallbackConfusionMatrix confusion_matrix = 36;
    CallbackCheckMetric check_metric = 37;
    CallbackPerturbAdam perturb_adam = 38;
    CallbackPerturbDropout perturb_dropout = 39;
    CallbackSaveTopKModels save_topk_models = 40;
    CallbackMixup mixup = 41;
    CallbackCheckInit init = 42;
    CallbackEarlyStopping early_stopping = 43;
    CallbackTimeline timeline = 44;
    CallbackPrintModelDescription print_model_description = 45;
    CallbackLoadModel load_model = 46;
  }

  message CallbackLTFB {
    int64 batch_interval = 1;
    string metric = 2;
    string weights = 3;       // default: all weights
    bool low_score_wins = 4;
    string communication_algorithm = 5;   // default: "sendrecv_weights"
    bool exchange_hyperparameters = 6;
    string checkpoint_basedir = 7;
  }

  message CallbackStepLearningRate {
    string weights = 1; //default: all weights
    int64 step = 2;
    double amt = 3;
  }

  message CallbackCustomLearningRate {
    //don't know how to support this, since it takes an std::function as an argument
  }

  message CallbackAdaptiveLearningRate {
    string weights = 1; //default: all weights
    int64 patience = 2;
    double amt = 3;
  }

  message CallbackSaveImages {
    string layers       = 1; // Layer outputs to save as images
    string image_format = 2; // Image format (e.g. jpg, png, pgm)
    string image_prefix = 3; // Prefix for saved image files
  }

  message CallbackPrint {
    int64 interval = 1; //default in lbann_callback_print.hpp is 1
    bool  print_global_stat_only = 2; //useful in large scale multi-trainer, default is false
  }

  message CallbackProfiler {
    bool sync = 1;
    bool skip_init = 2;
  }

  message CallbackTimer {
  }

  message CallbackSummary {
    int64 batch_interval = 2; //default in lbann_callback_summary.hpp is 1
    int64 mat_interval = 3; //default in lbann_callback_summary.hpp is 25
  }

  message CallbackDumpWeights {
    string basename = 1;
    int64  epoch_interval = 2;
  }

  message CallbackDumpOutputs {
    string layers = 1;          // Default: all layers
    string execution_modes = 2; // Default: all modes
    int64 batch_interval = 3;   // Frequency for output dumping (default: all steps)
    string directory = 4;       // Directory for output files
    string format = 5;          // Options: csv, tsv, npy, npz (default: csv)
  }

  message CallbackDumpErrorSignals {
    string basename = 1;
  }

  message CallbackDumpGradients {
    string basename = 1;
    int64 interval = 2;
  }

  message CallbackDumpMBIndices {
    string basename = 1;
    int64 interval = 2;
  }

  message CallbackDispIOStats {
    string layers = 1; //e.g: "2 4 5"; use "10000" to apply to all layers
  }

  message CallbackImComm {
    string intertrainer_comm_method = 1;
    bool all_optimizers = 2;
  }

  message CallbackDebug {
    string phase = 1; //should be called "modes"
  }

  message CallbackDebugIO {
    string phase = 1;
    int32 lvl = 2;
  }

  message CallbackCheckSmall {
  }

  message CallbackCheckNaN {
  }

  message CallbackCheckDataset {
  }

  message CallbackHang {
    int64 rank = 1;
  }

  message CallbackDropFixedLearningRate {
    string weights = 1;
    repeated int64 drop_epoch = 2;
    double amt = 3;
  }

  message CallbackLinearGrowthLearningRate {
    string weights = 1;
    double target = 2;
    int64 num_epochs = 3;
    int64 delay = 4;
  }

  message CallbackPolyLearningRate {
    string weights = 1;
    double power = 2;
    uint64 num_epochs = 3;
    uint64 max_iter = 4;
    double end_lr = 5;
  }

  message CallbackStepMinibatch {
    int64 starting_mbsize = 1;
    int64 step = 2;
    int64 ramp_time = 3;
  }

  message MinibatchScheduleStep {
    int64 epoch = 1;
    int64 mbsize = 2;
    double lr = 3;
    int64 ramp_time = 4;
  }

  message CallbackOptimizerwiseAdaptiveLearningRate {
    string weights = 1;
    double scale = 2;
  }

  message CallbackMinibatchSchedule {
    int64 starting_mbsize = 1;
    repeated MinibatchScheduleStep step = 2;
  }

  message CallbackCheckGradients {
    double step_size = 1;
    bool verbose = 2;
    bool error_on_failure = 3; // Throw error if gradient check fails
    string execution_modes = 4; // Default: all modes
  }

  message CallbackCheckMetric {
    string metric = 1;
    double lower_bound = 2;
    double upper_bound = 3;
    bool error_on_failure = 4;  // Throw error if metric check fails
    string execution_modes = 5; // Default: all modes
  }

  message CallbackCheckpoint {
    string checkpoint_dir = 1;
    string restart_dir = 8;
    int64 checkpoint_epochs = 2;
    int64 checkpoint_steps = 3;
    double checkpoint_secs = 4;
    string per_rank_dir = 5;
    int64 ckpt_dist_epochs = 6;
    int64 ckpt_dist_steps = 7;
  }


  message CallbackSaveModel {
    string dir = 1;
    string extension = 2;
    bool disable_save_after_training = 3;
  }

  message CallbackLoadModel {
    string dirs = 1;  //director(ies) to load pretrained model(s)
    string extension = 2;
  }

  message CallbackReplaceWeights {
    string source_layers = 1; //set of layers to copy weights from
    string destination_layers = 2;  //set of layers to copy weights to
    int64 batch_interval = 3;
  }
  message CallbackGPUMemoryUsage {
  }

  message CallbackSyncLayers {
    bool sync_gpus = 1;
    bool sync_mpi = 2;
    bool only_input = 3;
  }

  message CallbackConfusionMatrix {
    string prediction = 1; // Prediction layer
    string label = 2;      // Label layer
    string prefix = 3;     // Prefix for output files
  }

  message CallbackPerturbAdam {
    float learning_rate_factor = 1;   // Learning rate perturbation (in log space)
    float beta1_factor = 2;           // beta1 perturbation (in log space)
    float beta2_factor = 3;           // beta2 perturbation (in log space)
    float eps_factor = 4;             // eps perturbation (in log space)
    bool perturb_during_training = 5; // Whether to periodically perturb during training
    int64 batch_interval = 6;         // Frequency of perturbation if perturb_during_training is true
    string weights = 7;               // Weights with Adam optimizer
  }

  message CallbackPerturbDropout {
    float keep_dropout_factor = 1; //Keep dropout prob perturbation (in log space)
    string layers = 2; // dropout layers to perturb keep prob, all dropout layers by default
  }

  message CallbackSaveTopKModels {
    string dir = 1;  //directory to save model
    int32  k = 2;    //number of (top) models to save
    string metric = 3; //metrics to use in evaluating models
    bool  ascending_ordering = 4; //whether to sort metrics per model in ascending order, descending order is default
  }

  message CallbackMixup {
    string layers = 1;
    float alpha = 2;
  }

  message CallbackCheckInit {
  }

  message CallbackEarlyStopping {
    int64 patience = 1;
  }

  message CallbackTimeline {
    string directory = 1;
  }

  // Print human-readable description of model to standard output.
  //
  // Message is printed when the model has finished setup. The
  // description includes information on the model's layers, weights,
  // and callbacks.
  message CallbackPrintModelDescription {
  }

}
